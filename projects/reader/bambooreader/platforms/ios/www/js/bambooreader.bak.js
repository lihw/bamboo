/**
 * bamboo.js - The book organizer
 *
 * @category  Mobile-Hybrid
 * @package   bamboo
 * @author    Hongwei Li<lihw81@gmail.org>
 * @copyright 2012-2014 Future Interface
 * @license   MIT License
 * @version   0.1
 * @link      N/A
 * 
 *
 */

var bamboo = {
    // The book name
    _book : "book",
    // The current page number. The page number starts from 0 to _totalPageNumber - 1.
    _currentPageNumber : 0,
    // The current page object
    _currentPage : null,
    
    //
    // Opertions.
    //
    initialize: function() {
        // Bind the swiping gesture.
        $$('#wrapper').swipeLeft(function(){bamboo.pageDown();});
        $$('#wrapper').swipeRight(function(){bamboo.pageUp();});
        
        // Initialize the file system
        //window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        //if (window.File && window.FileReader && window.FileList && window.Blob) {
        //    window.requestFileSystem(window.PERSISTENT, bamboo._fileSystemQuota, bamboo.onFileSystemInitialized, bamboo.onFileSystemError);
        //} else {
        //    bamboo.error("Failed to load file system. Quitting.");
        //}
        /*
        // Register plugin functions.
        */
    },
    animatePage: function(nextPage, direction) {
        //this.debug("animate to " + direction + " " + $(nextPage).html());
        //this.debug("current: " + $(this._currentPage).html());
        
        //this.debug("before structure:" + $(this._currentPage).parent().parent().html());

        // Modify the CSS attributes of current page and next page.
        if (direction == "right") {
            // FIXME: Those embeded css() are to make css take effect immediately
            // after the HTML insertion by JQuery. It seems Sarafi doesn't apply
            // CSS to those dynamic content generated by JQuery.
            $(nextPage).attr('class', "page current right" );
            var tmp = $(nextPage).css("transform");
            //this.debug(tmp);
            $(nextPage).attr('class', "page current transition center");
            tmp = $(nextPage).css("transform");
            //this.debug(tmp);
            $(this._currentPage).attr('class', "page transition left" );
            tmp = $(nextPage).css("transform");
            //this.debug(tmp);
        } else {
            $(nextPage).attr('class', "page current left" );
            var tmp = $(nextPage).css("transform");
            //this.debug(tmp);
            $(nextPage).attr('class', "page current transition center");
            tmp = $(nextPage).css("transform");
            //this.debug(tmp);
            $(this._currentPage).attr('class', "page transition right" );
            tmp = $(nextPage).css("transform");
            //this.debug(tmp);
        }
        
        // Setup current page
        $(this._currentPage).unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd");
        
        this._currentPage = nextPage;
        this._currentPageNumber = parseInt($(this._currentPage).attr('page'));
        
        //this.debug("current page number: " + $(this._currentPage).attr('page'));
        
        $(this._currentPage).bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", 
            function() { bamboo.onPageAnimationEnd(direction); });
        
        //this.debug("after structure:" + $(this._currentPage).parent().parent().html());
    },
    pageDown: function() {
    	this._currentPage = $('.text').find('.page.center');
        
        // We are at the first page of the book, no way to page down.
        if (this._currentPageNumber == this._totalPageNumber) {
            return ;
        }
        // Next page.
        var nextPage = $(this._currentPage).next().first();

        this.hideGLLayer(function(){
                                    if (nextPage.length > 0) {
                                        bamboo.animatePage(nextPage, "right");
                                    } else {
                                        bamboo.debug("Starting load pages.");
                                        
                                        // If there is no more pages, insert the page to end.
                                        var nextPageNumber = bamboo._currentPageNumber + 1;
                                        bamboo.loadPage(nextPageNumber,
                                                      function(page) {
                                                        //bamboo.debug("loaded content:" + page);
                                                        var nextNode = '<div page="' + nextPageNumber + '" class="page right">' +
                                                                       page +
                                                                       '</div>';
                                                        var parent = $(bamboo._currentPage).parent();
                                                        $(parent).append(nextNode);
                                                        // Remove the page at the beginning if loaded pages are too many.
                                                        if ($(parent).children().size() > bamboo._maxNumberOfCachedPages) {
                                                            $(parent).children().first().remove();
                                                        }
                                                        bamboo.animatePage($(parent).children().last(), "right");
                                                        //bamboo.debug("structure:" + $(parent).html());
                                                      },
                                                      function() { 
                                                        alert("Failed to load page " + bamboo._currentPageNumber); 
                                                      });
                                    }
                    },
                    function(){});
    },
    pageUp: function() {
    	this._currentPage = $('.book').find('.page.center');
        
        // We are at the first page of the book, no way to page up.
        if (this._currentPageNumber == 1) {
            return ;
        }
        // Next page.
        var nextPage = $(this._currentPage).prev().first();
        
        this.hideGLLayer(function(){
                                if (nextPage.length > 0) {
                                    bamboo.animatePage(nextPage, "left");
                                } else {
                                    bamboo.debug("Start loading pages.");
                                    // If there is no more pages, insert the page to beginning..
                                    var nextPageNumber = bamboo._currentPageNumber - 1;
                                    bamboo.loadPage(nextPageNumber,
                                                  function(page) {
                                                    var nextNode = '<div page="' + nextPageNumber + '" class="page left">' +
                                                                   page +
                                                                   '</div>';

                                                    var parent = $(bamboo._currentPage).parent();
                                                    $(parent).prepend(nextNode);
                                                    // Remove the page at the beginning if loaded pages are too many.
                                                    // FIXME: tweak the max loaded page number. It is 5 now.
                                                    if ($(parent).children().size() > bamboo._maxNumberOfCachedPages) {
                                                        $(parent).children().last().remove();
                                                    }
                                                    bamboo.animatePage($(parent).children().first(), "left");
                                                    //bamboo.debug("structure:" + $(parent).html());
                                                  },
                                                  function() { 
                                                    alert("Failed to load page " + bamboo._currentPageNumber); 
                                                  });
                                }
                            },
                    function() {});
        
    },
    turnToPage: function(pageNumber) {
    },

    //
    // I/O
    //
    load: function(succeedCallback, failedCallback) {
        cordova.exec(succeedCallback,
                     failedCallback,
                     "BambooReaderPlugin", "loadBook", [bamboo._book]);
    }
    loadContent: function(succeedCallback, failedCallback) {
        cordova.exec(succeedCallback,
                     failedCallback,
                     "BambooReaderPlugin", "loadBookContent", [bamboo._book]);
    },
    loadPage: function(pageNumber, succeedCallback, failedCallback) {
        cordova.exec(succeedCallback,
                     failedCallback,
                     "BambooReaderPlugin", "loadBookPage", [bamboo._book, pageNumber.toString()]);
    },
    hideGLLayer: function(succeedCallback, failedCallback) {
        cordova.exec(succeedCallback,
                     failedCallback,
                     "BambooReaderPlugin", "hideGLLayer", []);
    },
    showGLLayer: function(succeedCallback, failedCallback) {
        cordova.exec(succeedCallback,
                     failedCallback,
                     "BambooReaderPlugin", "showGLLayer", []);
    },

    //
    // Event callbacks
    //
    onPageAnimationEnd: function(direction) {
        if (direction == "right") { // page down.
            //this.debug("new structure: " + $(this._currentPage).parent().html());
        } else { // page up.
            // Symmetric to pagedown
            //this.debug("new structure: " + $(this._currentPage).parent().html());
        }
        
        showGLLayer(function(){}, function(){});
    },
    
    //
    // Debug
    //
    info: function(message) {
        console.log(message);
    },
    error: function(message) {
        console.log('(error): ' + message, 'background: #ff0000; color: #ffffff');
    },
    debug: function(message) {
        console.log('(debug): ' + message);
    },
};
